From ecb6d6072d4dd9213fd17986578e92fedd82435e Mon Sep 17 00:00:00 2001
From: Stephen Blott <smblott+github@gmail.com>
Date: Tue, 21 Jan 2014 10:10:41 +0000
Subject: [PATCH 08/12] Documentation (and minor code cleanup).

---
 README.rst               | 23 +++++++++++++++++++++++
 cloudprint/cloudprint.py | 22 ++++++++++++----------
 2 files changed, 35 insertions(+), 10 deletions(-)

diff --git a/README.rst b/README.rst
index db1d604..fb23eb7 100644
--- a/README.rst
+++ b/README.rst
@@ -39,6 +39,29 @@ Example
   Password:
   Added Printer Brother-HL-2170W
 
+Examples - Include/Exclude
+---------------------------------------------------
+
+Include only the printers "`lp`" and "`2up`":
+::
+
+  cloudprint -i lp -i 2up
+
+Exclude all printers whose names start with "`GCP-`":
+::
+
+  cloudprint -e GCP-
+
+By default, all printers are included.  For the include and exclude options,
+the argument is a regular expression which is matched against the start of the
+printer name.
+
+For example, to include all printers whose names begin "`lp`":
+::
+
+  cloudprint -i lp # includes both lp and lp2up
+
+
 Install
 ---------------------------------------------------
 
diff --git a/cloudprint/cloudprint.py b/cloudprint/cloudprint.py
index 69c2837..7c891c3 100755
--- a/cloudprint/cloudprint.py
+++ b/cloudprint/cloudprint.py
@@ -297,13 +297,12 @@ class App(object):
     def run(self):
         process_jobs(self.cups_connection, self.cpp, self.printers)
 
-
 #True if printer name matches *any* of the regular expressions in regexps
-def match_any(printer, regexps):
-    for e in regexps:
-        if re.match(e, printer, re.UNICODE):
-            return True
-    return False
+def match_re(prn, regexps, empty=False):
+    if len(regexps):
+        return re.match(regexps[0], prn, re.UNICODE) or match_re(prn, regexps[1:])
+    else:
+        return empty
 
 def sync_printers(cups_connection, cpp):
     local_printer_names = set(cups_connection.getPrinters().keys())
@@ -311,8 +310,11 @@ def sync_printers(cups_connection, cpp):
     remote_printer_names = set(remote_printers)
 
     #Include/exclude local printers
-    local_printer_names = set([ printer for printer in local_printer_names if 0 == len(cpp.include) or match_any(printer,cpp.include) ])
-    local_printer_names = set([ printer for printer in local_printer_names if not match_any(printer,cpp.exclude) ])
+    local_printer_names = set([ prn for prn in local_printer_names if     match_re(prn,cpp.include,True) ])
+    local_printer_names = set([ prn for prn in local_printer_names if not match_re(prn,cpp.exclude     ) ])
+
+    print local_printer_names
+    sys.exit(0)
 
     #New printers
     for printer_name in local_printer_names - remote_printer_names:
@@ -416,8 +418,8 @@ def usage():
     print '-c\t\t: establish and store login credentials, then exit'
     print '-f\t\t: use fast poll if notifications are not working'
     print '-u\t\t: store username/password in addition to login token'
-    print '-i regexp\t: include files matching regexp'
-    print '-e regexp\t: exclude files matching regexp'
+    print '-i regexp\t: include local printers matching regexp'
+    print '-e regexp\t: exclude local printers matching regexp'
     print '\t\t regexp: a Python regexp, which is matched against the start of the printer name'
     print '-v\t\t: verbose logging'
     print '-h\t\t: display this help'
-- 
1.8.5.2

